/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
}
PARSER_BEGIN(ChartExpressionChecker)
package sim.app.episim.charts.parser;
import java.io.*;
import java.util.*;

public class ChartExpressionChecker {
	private Set<String> varNameSet = new HashSet<String>();
	
  
   
}
PARSER_END(ChartExpressionChecker)

//All possible Tokens

SKIP : { " " | "\n" | "\r" | "\r\n" }

TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > } 
TOKEN : { < DIVIDE : "/" > }
TOKEN : { < OPEN_PAR : "(" > } 
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < CLOSE_PA : "," > }
TOKEN:{<IDENTIFIER:<LETTER>(<LETTER>|<DIGIT>)*"."<LETTER>(<LETTER>|<DIGIT>)*>
 | <#LETTER:["A"-"Z", "a"-"z"]>
 | <#DIGIT:["0"-"9"]>
 }

TOKEN : { < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> > } 

TOKEN : { < #DIGITS : (["0"-"9"])+ > }

String Start(Set<String> varNameSet) throws NumberFormatException :
{
	if(varNameSet !=null)this.varNameSet =varNameSet;
String partialResult = "";
String totalResult = "";}
{
  (partialResult =UnaryExpression()
  
  {totalResult = totalResult.concat(partialResult);}
  
  )*
{return totalResult;}
}

String Primary() throws NumberFormatException :{
String result ="";
Token t;
}
{
  	(t =<NUMBER> { result = t.image;}
   	| LOOKAHEAD(5)(t =<IDENTIFIER> 
   		{if(!this.varNameSet.contains(t.image))
   			throw new TokenMgrError(false,TokenMgrError.LEXICAL_ERROR, t.beginLine, t.beginColumn, t.image, 's',TokenMgrError.LEXICAL_ERROR); 
   			else result = "getValue(\""+t.image+"\")";
   		})
   			
   	| result = SqrtFunction() 
    | result = PowFunction() 
    |<OPEN_PAR> result = UnaryExpression() <CLOSE_PAR> {result = "(" + result +")";})

{return result;}
}
 
String Expression():
{
	String result = "";
	String tmp = "";
}
{
  result = Term()(<PLUS>tmp =Term() { result = result +"+"+ tmp;}| <MINUS> tmp =Term(){ result = result +"-"+ tmp;})*
{return result;}
}

String Term():
{
	String result = "";
	String tmp = "";
}
{
 
 result = Primary()(<TIMES>tmp = Primary(){ result = result +"*"+ tmp;} | <DIVIDE>tmp=Primary(){ result = result +"/"+ tmp;})*
 
 {return result;}
}

String PowFunction():{
String exp1 = "";
String exp2 = "";

}
 {
 ("Pow(" exp1 =UnaryExpression() "," exp2=UnaryExpression()")")
 {return "java.lang.Math.pow("+exp1+","+exp2+")";}
 }

 

 String SqrtFunction():
 {String exp = "";}
 {
 ("Sqrt("exp =UnaryExpression()")")
 {return "java.lang.Math.sqrt("+exp+")";}
 }
 
 String UnaryExpression():{
 	String unary = "";
 	String expression ="";
 }
 {
  (unary=UnaryOperator())?expression=Expression()
  {return unary + expression;}
}
String UnaryOperator():{
String operator ="";
}
{ ("+" {operator = "+1*";}| "-" {operator ="-1*"; })

{return operator;}
}

