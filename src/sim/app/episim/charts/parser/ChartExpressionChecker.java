/* Generated By:JavaCC: Do not edit this line. ChartExpressionChecker.java */
package sim.app.episim.charts.parser;
import java.io.*;
import java.util.*;

public @SuppressWarnings("all") class ChartExpressionChecker implements ChartExpressionCheckerConstants {
        private Set<String> varNameSet = new HashSet<String>();
        private Set<Character> booleanCharacterSet = new HashSet<Character>();
        private char[] ops = new char[]{'>','<','=','!','&','|'};

        private void checkIfStringArithExpr(String str) throws ParseException{
                if(booleanCharacterSet.size() == 0) for(char c :ops) booleanCharacterSet.add(c);
                if(str != null){
                        for(int i = 0; i< str.length();i++){
                                if(booleanCharacterSet.contains(str.charAt(i)))
                                throw new ParseException("Unexpected Boolean or Relational Operator found: '" + str.charAt(i)+ "'\nSubsequence: \""
                                                +str+"\nChar Pos: " + (i+1));
                        }
                }

        }

  final public String Start(Set<String> varNameSet) throws ParseException, NumberFormatException {
        if(varNameSet !=null)this.varNameSet =varNameSet;
String partialResult = "";
String totalResult = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD_SUBT_OP:
      case OPEN_PAR:
      case NOT:
      case IDENTIFIER:
      case NUMBER:
      case 18:
      case 20:
      case 21:
      case 22:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      partialResult = BooleanExpression();
   totalResult = totalResult.concat(partialResult);
    }
 {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String Factor() throws ParseException, NumberFormatException {
String result ="";
int[][] dummy1= new int[1][1];
String[] dummy2 = new String[1];
dummy2[0] = "";
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
                       result = t.image;
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(5)) {
        t = jj_consume_token(IDENTIFIER);
                 if(!this.varNameSet.contains(t.image))
                        {if (true) throw new ParseException("Unknown Identifier: " + t.image);}
                        else result = "getValue(\""+t.image+"\")";
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          result = SqrtFunction();
          break;
        case 18:
          result = PowFunction();
          break;
        case 22:
          result = AllCellsWhere();
          break;
        case 20:
          result = AllCellsMeanValueFunction();
          break;
        case OPEN_PAR:
          jj_consume_token(OPEN_PAR);
          result = BooleanExpression();
          jj_consume_token(CLOSE_PAR);
                                                          result = "(" + result +")";
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
 {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String Expression() throws ParseException {
        String exp1 = "";
        String exp2 = "";
        Token t = null;
    exp1 = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD_SUBT_OP:
      t = jj_consume_token(ADD_SUBT_OP);
      exp2 = Term();
                                              checkIfStringArithExpr(exp2);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
   if (t !=null){if (true) return exp1 + t.image + exp2;}
   else {if (true) return exp1 + exp2;}
    throw new Error("Missing return statement in function");
  }

  final public String Term() throws ParseException {
        String exp1 = "";
        String exp2 = "";
        Token t = null;
    exp1 = SignedFactor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT_DIV_OP:
      t = jj_consume_token(MULT_DIV_OP);
      exp2 = Factor();
                                                      checkIfStringArithExpr(exp2);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
   if (t !=null){if (true) return exp1 + t.image + exp2;}
   else {if (true) return exp1 + exp2;}
    throw new Error("Missing return statement in function");
  }

  final public String SignedFactor() throws ParseException {
        String unary = "";
        String factor ="";
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD_SUBT_OP:
      t = jj_consume_token(ADD_SUBT_OP);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    factor = Factor();
        if(t != null)checkIfStringArithExpr(factor);

            if (t !=null){if (true) return t.image + factor;}
            else {if (true) return factor;}
    throw new Error("Missing return statement in function");
  }

  final public String PowFunction() throws ParseException {
String exp1 = "";
String exp2 = "";
    jj_consume_token(18);
    exp1 = Expression();
    jj_consume_token(19);
    exp2 = Expression();
    jj_consume_token(CLOSE_PAR);
        {if (true) return "java.lang.Math.pow("+exp1+","+exp2+")";}
    throw new Error("Missing return statement in function");
  }

  final public String AllCellsMeanValueFunction() throws ParseException {
        String exp1 = "";
        String exp2 = null;
        String exp3 = null;
        String exp4 = null;
        String exp5 = null;
    jj_consume_token(20);
    exp1 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSE_PAR:
      jj_consume_token(CLOSE_PAR);
      break;
    case 19:
      jj_consume_token(19);
      exp2 = Expression();
      jj_consume_token(19);
      exp3 = Expression();
      jj_consume_token(19);
      exp4 = Expression();
      jj_consume_token(19);
      exp5 = Expression();
      jj_consume_token(CLOSE_PAR);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        checkIfStringArithExpr(exp1);
        checkIfStringArithExpr(exp2);
        checkIfStringArithExpr(exp3);
        checkIfStringArithExpr(exp4);
        checkIfStringArithExpr(exp5);

        if(exp2 == null || exp3 == null || exp4 == null ||exp5 == null) {if (true) return "getAllCellsMeanValue("+exp1+")";}
        else {if (true) return "getAllCellsMeanValue("+exp1+","+exp2+","+exp3+","+exp4+","+exp5+")";}
    throw new Error("Missing return statement in function");
  }

  final public String SqrtFunction() throws ParseException {
  String exp = "";
    jj_consume_token(21);
    exp = Expression();
    jj_consume_token(CLOSE_PAR);
        checkIfStringArithExpr(exp);
        {if (true) return "java.lang.Math.sqrt("+exp+")";}
    throw new Error("Missing return statement in function");
  }

  final public String AllCellsWhere() throws ParseException {
        String exp1 = "";
        String exp2 = "";
    jj_consume_token(22);
    exp1 = Expression();
    jj_consume_token(19);
    exp2 = BooleanExpression();
    jj_consume_token(CLOSE_PAR);
        checkIfStringArithExpr(exp1);
        {if (true) return "getAllCellsWhere("+exp1+","+exp2+")";}
    throw new Error("Missing return statement in function");
  }

  final public String BooleanExpression() throws ParseException {
        String exp1 = "";
        String exp2 = "";
    exp1 = BooleanTerm();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(23);
                                exp1 += "||";
      exp2 = BooleanTerm();
    }
         {if (true) return exp1+ exp2;}
    throw new Error("Missing return statement in function");
  }

  final public String BooleanTerm() throws ParseException {
        String exp1 = "";
        String exp2 = "";
    exp1 = NotFactor();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(24);
                            exp1 += "&&";
      exp2 = NotFactor();
    }
         {if (true) return exp1+ exp2;}
    throw new Error("Missing return statement in function");
  }

  final public String NotFactor() throws ParseException {
        String exp1 = "";
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    exp1 = RelationalExpression();
                if(t != null) {if (true) return t.image + exp1;}
                else {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public String RelationalExpression() throws ParseException {
        String exp1 = "";
        String exp2 = "";
        Token t = null;
    exp1 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REL_OP:
      t = jj_consume_token(REL_OP);
      exp2 = Expression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
        if(t!=null) {if (true) return exp1+ t.image + exp2;}
        else {if (true) return exp1 + exp2;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  public ChartExpressionCheckerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7530a0,0x10000,0x740080,0x20,0x40,0x20,0x80100,0x800000,0x1000000,0x1000,0x200,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ChartExpressionChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  public ChartExpressionChecker(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ChartExpressionCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ChartExpressionChecker(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ChartExpressionCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ChartExpressionChecker(ChartExpressionCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ChartExpressionCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
