/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
  STATIC = false;
}
PARSER_BEGIN(DataMonitoringExpressionChecker)
package sim.app.episim.datamonitoring.parser;
import java.io.*;
import java.util.*;
import sim.app.episim.util.*;
import sim.app.episim.datamonitoring.steppables.*;

public class DataMonitoringExpressionChecker {
	private Set<String> varNameSet = new HashSet<String>();
	private Set<String> recognizedVarNames;
	private Set<Character> booleanCharacterSet = new HashSet<Character>();
	private TissueCellDataFieldsInspector tissueDataFieldsInspector;
	
	private boolean instructionOpened = false;
	private char[] ops = new char[]{'>','<','=','!','&','|'};
	
  	private void checkIfStringArithExpr(String str) throws ParseException{
  		if(booleanCharacterSet.size() == 0) for(char c :ops) booleanCharacterSet.add(c);
  		
  		if(str != null){
  			for(int i = 0; i< str.length();i++){ 
  				if(booleanCharacterSet.contains(str.charAt(i))) 
  				throw new ParseException("Unexpected Boolean or Relational Operator found: '" + str.charAt(i)+ "'\nSubsequence: \""
  	                               		+str+"\nChar Pos: " + (i+1));
  			}
  		}
  		
  	}
   
}
PARSER_END(DataMonitoringExpressionChecker)

//All possible Tokens

SKIP : { " " | "\n" | "\r" | "\r\n" }

TOKEN : { < ADD_SUBT_OP : ["+", "-"]> }
TOKEN : { < MULT_DIV_OP : ["*", "/"]> }
TOKEN : { < OPEN_PAR : "(" > } 
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < REL_OP : <BIG_SMALL>| <BIG_SMALL><EQUAL> | <EQUAL><EQUAL> | <NOT><EQUAL>>
	| <#BIG_SMALL:["<", ">"]>
	| <#EQUAL:["="]>}
TOKEN : { <NOT:["!"]>}	
TOKEN:{<IDENTIFIER:<LETTER>(<SIGN>|<LETTER>|<DIGIT>)*"."<LETTER>(<SIGN>|<LETTER>|<DIGIT>)*>
 | <#LETTER:["A"-"Z", "a"-"z"]>
 | <#SIGN:["_"]>
 | <#DIGIT:["0"-"9"]>
 }

TOKEN : { < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> > } 

TOKEN : { < #DIGITS : (["0"-"9"])+ > }

String check(TissueCellDataFieldsInspector tissueDataFieldsInspector) throws NumberFormatException :
{
	this.varNameSet = tissueDataFieldsInspector.getOverallVarNameSet();
	this.tissueDataFieldsInspector = tissueDataFieldsInspector;
	this.recognizedVarNames = new HashSet<String>();
String partialResult = "";
String[] partResultArray = null;
String totalResult = "";}
{
  (partResultArray =Start()
  
  {
  	partialResult = partResultArray[1];
  	totalResult = totalResult.concat(partialResult);}
  
  )*
{return totalResult;}
}

String[] Start():{
String[] result =null;


}
{
  	(result = GradientFunction()
  	 | result = CellFunction()
  	 | result = BooleanExpression()) 

{return result;}
}








String[] Factor() throws NumberFormatException :{
String result ="";
String[] totalResult = new String[2];
Token t;
}
{
  	(t =<NUMBER> { result = t.image; totalResult[0] = result; totalResult[1]= result;}
   	| LOOKAHEAD(5)(t =<IDENTIFIER> 
   		{if(!this.varNameSet.contains(t.image))
   			throw new ParseException("Unknown Identifier: " + t.image);
   		if(!instructionOpened){
   			if(!this.tissueDataFieldsInspector.checkIfIdentifierIsGlobalParameter(t.image))
   			throw new ParseException("Global Simulation Parameter Expected! Found: " + t.image);
   		} 
   				totalResult[0]=t.image;
   				
   				this.recognizedVarNames.add(t.image);
   				this.tissueDataFieldsInspector.addRequiredClassForIdentifier(t.image);
   				result = this.tissueDataFieldsInspector.getMethodCallStrForVarName(t.image);
   				totalResult[1]= result;
   			
   		})
   			
   	| totalResult = SqrtFunction() 
    | totalResult = PowFunction()
   // | result = AllCellsWhere() 
    | totalResult = AllCellsMeanValueFunction()
    | <OPEN_PAR> totalResult = BooleanExpression() <CLOSE_PAR> {totalResult[0] = "(" + totalResult[0] +")";totalResult[1] = "(" + totalResult[1] +")";})

{return totalResult;}
}
 
String[] Expression():
{
	String[] exp1 = null;
	String[] exp2 = null;
	Token t = null;
	String[] totalResult = new String[2];
}
{
  exp1 = Term()[t= <ADD_SUBT_OP> exp2 =Term(){checkIfStringArithExpr(exp2[0]);}  	
  	]
{
   if (t !=null && exp2 != null){
   	totalResult[0] = exp1[0] + t.image + exp2[0];
    totalResult[1] = exp1[1] + t.image + exp2[1];
   }
   else if(exp2 != null){
   	 totalResult[0] = exp1[0] + exp2[0];
     totalResult[1] = exp1[1] + exp2[1];
   }
   else{
   	 totalResult[0] = exp1[0];
     totalResult[1] = exp1[1];
   }	
   return totalResult;
 }
}

String[] Term():
{
	String[] exp1 = null;
	String[] exp2 = null;
	Token t = null;
	String[] totalResult = new String[2];
}
{
 
 exp1 =SignedFactor()[t=<MULT_DIV_OP> exp2 = Factor(){checkIfStringArithExpr(exp2[0]);}]
 
 {
  if (t !=null && exp2 != null){
   	totalResult[0] = exp1[0] + t.image + exp2[0];
    totalResult[1] = exp1[1] + t.image + exp2[1];
   }
   else if(exp2 != null){
   	 totalResult[0] = exp1[0] + exp2[0];
     totalResult[1] = exp1[1] + exp2[1];
   }
   else{
   	 totalResult[0] = exp1[0];
     totalResult[1] = exp1[1];
   }	
   return totalResult;
 }
}



String[] SignedFactor():{
 	String unary = "";
 	String[] factor =null;
 	Token t = null;
 	String[] totalResult = new String[2];
 }
 {
  [t = <ADD_SUBT_OP>] factor=Factor(){
  	if(t != null)checkIfStringArithExpr(factor[0]);
  	     
  	    if (t !=null){
  	    	totalResult[0]= t.image + factor[0];
  	    	totalResult[1]= t.image + factor[1];
  	    }
  	    else{
  	    	totalResult[0]= factor[0];
  	    	totalResult[1]= factor[1];
  	    }
  	    return totalResult;
  } 
  
}

	



String[] PowFunction():{
String[] exp1 = null;
String[] exp2 = null;
String[] totalResult = new String[2];
}
 {
 ("Pow(" exp1 =Expression() "," exp2=Expression()")")
 {
 	
 	
 	totalResult[0] ="java.lang.Math.pow("+exp1[0]+","+exp2[0]+")";
 	totalResult[1] ="java.lang.Math.pow("+exp1[1]+","+exp2[1]+")";
 	return totalResult;
 }
 }

 String[] AllCellsMeanValueFunction():
 {
 	String[] exp1 = null; 
 	boolean instructOpenedLocal = instructionOpened;
 	instructionOpened = true;
 	String[] totalResult = new String[2];
 }
 {
 ("ACMV("exp1 =Expression()(")")) 
 {
 	
 	checkIfStringArithExpr(exp1[0]);
 	if(!(this.tissueDataFieldsInspector.checkForCellTypeConflict(this.recognizedVarNames))) 
 		throw new ParseException("Usage of parameters owned by different cell types in one expression is not allowed!");
 		if(!instructOpenedLocal)instructionOpened = false;
 		
 		totalResult[0] = "ACMV("+exp1[0]+")";	
 	    totalResult[1] =SteppableCodeFactory.getCalculationHandlerAndMethodCallForExpression(Names.BUILDACMVHANDLER+exp1[1], this.tissueDataFieldsInspector.getRequiredClasses());
 	return totalResult;
 }
 }
 
 
 String[] GradientFunction():
 {
 	String[] exp1 = null;
 	boolean instructOpenedLocal = instructionOpened;
 	instructionOpened = true;
 	String[] totalResult = new String[2]; 
 }
 {
 ("GRAD("exp1 =Expression()(")"))
 {
 	
 	checkIfStringArithExpr(exp1[0]);
 	if(!(this.tissueDataFieldsInspector.checkForCellTypeConflict(this.recognizedVarNames))) 
 		throw new ParseException("Usage of parameters owned by different cell types in one expression is not allowed!"); 	
 	if(!instructOpenedLocal)instructionOpened = false;
 	totalResult[0]= "GRAD("+exp1[0]+")";
 	totalResult[1] = Names.BUILDGRADIENTHANDLER + SteppableCodeFactory.
 	                          getCalculationHandlerAndMethodCallForExpression(Names.BUILDGRADIENTHANDLER+exp1[1], this.tissueDataFieldsInspector.getRequiredClasses());
 	return totalResult;
 }
 }
 
 String[] CellFunction():
 {
 	String[] exp1 = null;
 	boolean instructOpenedLocal = instructionOpened;
 	instructionOpened = true;
 	String[] totalResult = new String[2]; 
 }
 {
 ("CELL("exp1 =Expression()(")"))
 {
 	
 	checkIfStringArithExpr(exp1[0]);
 	if(!(this.tissueDataFieldsInspector.checkForCellTypeConflict(this.recognizedVarNames))) 
 		throw new ParseException("Usage of parameters owned by different cell types in one expression is not allowed!"); 	
 	if(!instructOpenedLocal)instructionOpened = false;
 	totalResult[0]= "CELL("+exp1[0]+")";
 	totalResult[1] = Names.BUILDCELLHANDLER + SteppableCodeFactory.
 	                          getCalculationHandlerAndMethodCallForExpression(Names.BUILDCELLHANDLER+exp1[1], this.tissueDataFieldsInspector.getRequiredClasses());
 	return totalResult;
 }
 }
 

 
 

 String[] SqrtFunction():
 {
 	String[] exp = null;
 	String[] totalResult = new String[2];
 }
 {
 ("Sqrt("exp =Expression()")")
 {
 	checkIfStringArithExpr(exp[0]);
 	totalResult[0]= "Sqrt("+exp[0]+")";
 	totalResult[1]="java.lang.Math.sqrt("+exp[1]+")";
 	
 	return totalResult;	
 }
 }
 
 
 
 

String[] AllCellsWhere():
 {
 	String[] exp1 = null;
 	String[] exp2 = null;
 	String[] totalResult = new String[2];
 }
 {
 ("ACW("exp1 =Expression() "," exp2=BooleanExpression()")")
 {
 	checkIfStringArithExpr(exp1[0]);
 	totalResult[0]= "ACW("+exp1[0]+"," +exp2[0]+")";
 	totalResult[1]="getAllCellsWhere("+exp1[1]+","+exp2[1]+")";
 	return totalResult;
 }
 }

String[] BooleanExpression():{
 	String[] exp1 = null;
 	String[] exp2 = null;
 	String[] totalResult = new String[2]; 	
 }
 { 
    exp1 =BooleanTerm()  ("||" {exp1[0] += "||"; exp1[1] += "||";} exp2=BooleanTerm())*
    
	
	{
		if(exp2 != null){
			totalResult[0] =exp1[0]+ exp2[0];
			totalResult[1] =exp1[1]+ exp2[1];
		}
		else{
			totalResult[0] =exp1[0];
			totalResult[1] =exp1[1];
		}
		return totalResult;
	}
}



String[] BooleanTerm():{
 	String[] exp1 = null;
 	String[] exp2 = null;
 	String[] totalResult = new String[2]; 	
 }
 { 
    exp1 = NotFactor()("&&"{exp1[0] += "&&"; exp1[1] += "&&";} exp2 =NotFactor())*
    
	
	{
		if(exp2 != null){
			totalResult[0] =exp1[0]+ exp2[0];
			totalResult[1] =exp1[1]+ exp2[1];
		}
		else{
			totalResult[0] =exp1[0];
			totalResult[1] =exp1[1];
		}
		return totalResult;
	}
}

String[] NotFactor():{
 	String[] exp1 = null;
 	Token t = null; 
 	String[] totalResult = new String[2]; 	
 }
 { 
    [t=<NOT>]exp1=RelationalExpression()
    
	
	{
		if(t != null){
			 totalResult[0]= t.image + exp1[0];
			 totalResult[1]= t.image + exp1[1];
		}
		else{
			 totalResult[0]= exp1[0];
			 totalResult[1]= exp1[1];
		}
		return totalResult;
   }
}

String[] RelationalExpression():{
 	String[] exp1 = null;
 	String[] exp2 = null;
 	Token t = null;
 	String[] totalResult = new String[2]; 	
 }
 {
 exp1 =Expression()[t=<REL_OP> exp2 =Expression()]
 
 {
 	
 	if (t !=null && exp2 != null){
   	totalResult[0] = exp1[0] + t.image + exp2[0];
    totalResult[1] = exp1[1] + t.image + exp2[1];
   }
   else if(exp2 != null){
   	 totalResult[0] = exp1[0] + exp2[0];
     totalResult[1] = exp1[1] + exp2[1];
   }
   else{
   	 totalResult[0] = exp1[0];
     totalResult[1] = exp1[1];
   }	
   return totalResult;
 	
 }
}







