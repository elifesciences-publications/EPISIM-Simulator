/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
  STATIC = false;
}
PARSER_BEGIN(DataMonitoringExpressionChecker)
package sim.app.episim.datamonitoring.parser;
import java.io.*;
import java.util.*;
import sim.app.episim.util.*;

public class DataMonitoringExpressionChecker {
	private Set<String> varNameSet = new HashSet<String>();
	private Set<Character> booleanCharacterSet = new HashSet<Character>();
	private TissueCellDataFieldsInspector tissueDataFieldsInspector;
	private char[] ops = new char[]{'>','<','=','!','&','|'};
	
  	private void checkIfStringArithExpr(String str) throws ParseException{
  		if(booleanCharacterSet.size() == 0) for(char c :ops) booleanCharacterSet.add(c);
  		
  		if(str != null){
  			for(int i = 0; i< str.length();i++){ 
  				if(booleanCharacterSet.contains(str.charAt(i))) 
  				throw new ParseException("Unexpected Boolean or Relational Operator found: '" + str.charAt(i)+ "'\nSubsequence: \""
  	                               		+str+"\nChar Pos: " + (i+1));
  			}
  		}
  		
  	}
   
}
PARSER_END(DataMonitoringExpressionChecker)

//All possible Tokens

SKIP : { " " | "\n" | "\r" | "\r\n" }

TOKEN : { < ADD_SUBT_OP : ["+", "-"]> }
TOKEN : { < MULT_DIV_OP : ["*", "/"]> }
TOKEN : { < OPEN_PAR : "(" > } 
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < REL_OP : <BIG_SMALL>| <BIG_SMALL><EQUAL> | <EQUAL><EQUAL> | <NOT><EQUAL>>
	| <#BIG_SMALL:["<", ">"]>
	| <#EQUAL:["="]>}
TOKEN : { <NOT:["!"]>}	
TOKEN:{<IDENTIFIER:<LETTER>(<SIGN>|<LETTER>|<DIGIT>)*"."<LETTER>(<SIGN>|<LETTER>|<DIGIT>)*>
 | <#LETTER:["A"-"Z", "a"-"z"]>
 | <#SIGN:["_"]>
 | <#DIGIT:["0"-"9"]>
 }

TOKEN : { < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> > } 

TOKEN : { < #DIGITS : (["0"-"9"])+ > }

String check(TissueCellDataFieldsInspector tissueDataFieldsInspector) throws NumberFormatException :
{
	this.varNameSet = tissueDataFieldsInspector.getOverallVarNameSet();
	this.tissueDataFieldsInspector = tissueDataFieldsInspector;
String partialResult = "";
String totalResult = "";}
{
  (partialResult =Start()
  
  {totalResult = totalResult.concat(partialResult);}
  
  )*
{return totalResult;}
}

String Start():{
String result ="";


}
{
  	(result = GradientFunction()
  	 | result = BooleanExpression()) 

{return result;}
}








String Factor() throws NumberFormatException :{
String result ="";

Token t;
}
{
  	(t =<NUMBER> { result = t.image;}
   	| LOOKAHEAD(5)(t =<IDENTIFIER> 
   		{if(!this.varNameSet.contains(t.image))
   			throw new ParseException("Unknown Identifier: " + t.image); 
   			else{
   				this.tissueDataFieldsInspector.addRequiredClassForIdentifier(t.image);
   				result = this.tissueDataFieldsInspector.getMethodCallStrForVarName(t.image);
   			}
   		})
   			
   	| result = SqrtFunction() 
    | result = PowFunction()
   // | result = AllCellsWhere() 
   // | result = AllCellsMeanValueFunction()
    | <OPEN_PAR> result = BooleanExpression() <CLOSE_PAR> {result = "(" + result +")";})

{return result;}
}
 
String Expression():
{
	String exp1 = "";
	String exp2 = "";
	Token t = null;
}
{
  exp1 = Term()[t= <ADD_SUBT_OP> exp2 =Term(){checkIfStringArithExpr(exp2);}  	
  	]
{
   if (t !=null)return exp1 + t.image + exp2;
   else return exp1 + exp2;	
 }
}

String Term():
{
	String exp1 = "";
	String exp2 = "";
	Token t = null;
}
{
 
 exp1 =SignedFactor()[t=<MULT_DIV_OP> exp2 = Factor(){checkIfStringArithExpr(exp2);}]
 
 {
   if (t !=null)return exp1 + t.image + exp2;
   else return exp1 + exp2;	
 }
}



String SignedFactor():{
 	String unary = "";
 	String factor ="";
 	Token t = null;
 }
 {
  [t = <ADD_SUBT_OP>] factor=Factor(){
  	if(t != null)checkIfStringArithExpr(factor);
  	     
  	    if (t !=null)return t.image + factor;
  	    else return factor;
  } 
  
}

	



String PowFunction():{
String exp1 = "";
String exp2 = "";

}
 {
 ("Pow(" exp1 =Expression() "," exp2=Expression()")")
 {
 	
 	
 	return "java.lang.Math.pow("+exp1+","+exp2+")";}
 }

 String AllCellsMeanValueFunction():
 {
 	String exp1 = "";
 	String exp2 = null;
 	String exp3 = null;
 	String exp4 = null;
 	String exp5 = null;
 
 }
 {
 ("ACMV("exp1 =Expression()((")") |
  (                   "," 
                      exp2 =Expression() ","
                      exp3 =Expression() ","
                      exp4 =Expression() ","
                      exp5 =Expression()")" )))
 {
 	
 	checkIfStringArithExpr(exp1);
 	checkIfStringArithExpr(exp2);
 	checkIfStringArithExpr(exp3);
 	checkIfStringArithExpr(exp4);
 	checkIfStringArithExpr(exp5);
 	
 	if(exp2 == null || exp3 == null || exp4 == null ||exp5 == null) return "getAllCellsMeanValue("+exp1+")";
 	else return "getAllCellsMeanValue("+exp1+","+exp2+","+exp3+","+exp4+","+exp5+")";
 }
 }
 
 
 String GradientFunction():
 {
 	String exp1 = ""; 
 }
 {
 ("GRAD("exp1 =Expression()(")"))
 {
 	
 	checkIfStringArithExpr(exp1);
 	 	
 	return Names.BUILDGRADIENTHANDLER +exp1;
 	
 }
 }
 

 
 

 String SqrtFunction():
 {String exp = "";}
 {
 ("Sqrt("exp =Expression()")")
 {
 	checkIfStringArithExpr(exp);
 	return "java.lang.Math.sqrt("+exp+")";}
 }
 
 
 
 

String AllCellsWhere():
 {
 	String exp1 = "";
 	String exp2 = "";
 }
 {
 ("ACW("exp1 =Expression() "," exp2=BooleanExpression()")")
 {
 	checkIfStringArithExpr(exp1);
 	return "getAllCellsWhere("+exp1+","+exp2+")";
 	
 }
 }

String BooleanExpression():{
 	String exp1 = "";
 	String exp2 = ""; 	
 }
 { 
    exp1 =BooleanTerm()  ("||" {exp1 += "||";} exp2=BooleanTerm())*
    
	
	{return exp1+ exp2;}
}



String BooleanTerm():{
 	String exp1 = "";
 	String exp2 = ""; 	
 }
 { 
    exp1 = NotFactor()("&&"{exp1 += "&&";} exp2 =NotFactor())*
    
	
	{return exp1+ exp2;}
}

String NotFactor():{
 	String exp1 = "";
 	Token t = null; 	
 }
 { 
    [t=<NOT>]exp1=RelationalExpression()
    
	
	{
		if(t != null) return t.image + exp1;
		else return exp1;
   }
}

String RelationalExpression():{
 	String exp1 = "";
 	String exp2 = "";
 	Token t = null; 	
 }
 {
 exp1 =Expression()[t=<REL_OP> exp2 =Expression()]
 
 {
 	if(t!=null) return exp1+ t.image + exp2;	
 	else return exp1 + exp2;
 	
 }
}







