/* Generated By:JavaCC: Do not edit this line. DataMonitoringExpressionChecker.java */
package sim.app.episim.datamonitoring.parser;
import java.io.*;
import java.util.*;
import sim.app.episim.util.*;
import sim.app.episim.datamonitoring.steppables.*;

public class DataMonitoringExpressionChecker implements DataMonitoringExpressionCheckerConstants {
        private Set<String> varNameSet = new HashSet<String>();
        private Set<String> recognizedVarNames;
        private Set<Character> booleanCharacterSet = new HashSet<Character>();
        private TissueCellDataFieldsInspector tissueDataFieldsInspector;

        private boolean instructionOpened = false;
        private char[] ops = new char[]{'>','<','=','!','&','|'};

        private void checkIfStringArithExpr(String str) throws ParseException{
                if(booleanCharacterSet.size() == 0) for(char c :ops) booleanCharacterSet.add(c);

                if(str != null){
                        for(int i = 0; i< str.length();i++){
                                if(booleanCharacterSet.contains(str.charAt(i)))
                                throw new ParseException("Unexpected Boolean or Relational Operator found: '" + str.charAt(i)+ "'\nSubsequence: \""
                                                +str+"\nChar Pos: " + (i+1));
                        }
                }

        }

  final public String check(TissueCellDataFieldsInspector tissueDataFieldsInspector) throws ParseException, NumberFormatException {
        this.varNameSet = tissueDataFieldsInspector.getOverallVarNameSet();
        this.tissueDataFieldsInspector = tissueDataFieldsInspector;
        this.recognizedVarNames = new HashSet<String>();
String partialResult = "";
String[] partResultArray = null;
String totalResult = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD_SUBT_OP:
      case OPEN_PAR:
      case NOT:
      case IDENTIFIER:
      case NUMBER:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      partResultArray = Start();
        partialResult = partResultArray[1];
        totalResult = totalResult.concat(partialResult);
    }
 {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] Start() throws ParseException {
String[] result =null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      result = GradientFunction();
      break;
    case 23:
      result = CellFunction();
      break;
    case ADD_SUBT_OP:
    case OPEN_PAR:
    case NOT:
    case IDENTIFIER:
    case NUMBER:
    case 19:
    case 21:
    case 24:
      result = BooleanExpression();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String[] Factor() throws ParseException, NumberFormatException {
String result ="";
String[] totalResult = new String[2];
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
                       result = t.image; totalResult[0] = result; totalResult[1]= result;
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_1(5)) {
        t = jj_consume_token(IDENTIFIER);
                 if(!this.varNameSet.contains(t.image))
                        {if (true) throw new ParseException("Unknown Identifier: " + t.image);}
                if(!instructionOpened){
                        if(!this.tissueDataFieldsInspector.checkIfIdentifierIsGlobalParameter(t.image))
                        {if (true) throw new ParseException("Global Simulation Parameter Expected! Found: " + t.image);}
                }
                                totalResult[0]=t.image;

                                this.recognizedVarNames.add(t.image);
                                this.tissueDataFieldsInspector.addRequiredClassForIdentifier(t.image);
                                result = this.tissueDataFieldsInspector.getMethodCallStrForVarName(t.image);
                                totalResult[1]= result;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 24:
          totalResult = SqrtFunction();
          break;
        case 19:
          totalResult = PowFunction();
          break;
        case 21:
          totalResult = AllCellsMeanValueFunction();
          break;
        case OPEN_PAR:
          jj_consume_token(OPEN_PAR);
          totalResult = BooleanExpression();
          jj_consume_token(CLOSE_PAR);
                                                                totalResult[0] = "(" + totalResult[0] +")";totalResult[1] = "(" + totalResult[1] +")";
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
 {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] Expression() throws ParseException {
        String[] exp1 = null;
        String[] exp2 = null;
        Token t = null;
        String[] totalResult = new String[2];
    exp1 = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD_SUBT_OP:
      t = jj_consume_token(ADD_SUBT_OP);
      exp2 = Term();
                                              checkIfStringArithExpr(exp2[0]);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
   if (t !=null && exp2 != null){
        totalResult[0] = exp1[0] + t.image + exp2[0];
    totalResult[1] = exp1[1] + t.image + exp2[1];
   }
   else if(exp2 != null){
         totalResult[0] = exp1[0] + exp2[0];
     totalResult[1] = exp1[1] + exp2[1];
   }
   else{
         totalResult[0] = exp1[0];
     totalResult[1] = exp1[1];
   }
   {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] Term() throws ParseException {
        String[] exp1 = null;
        String[] exp2 = null;
        Token t = null;
        String[] totalResult = new String[2];
    exp1 = SignedFactor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT_DIV_OP:
      t = jj_consume_token(MULT_DIV_OP);
      exp2 = Factor();
                                                      checkIfStringArithExpr(exp2[0]);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  if (t !=null && exp2 != null){
        totalResult[0] = exp1[0] + t.image + exp2[0];
    totalResult[1] = exp1[1] + t.image + exp2[1];
   }
   else if(exp2 != null){
         totalResult[0] = exp1[0] + exp2[0];
     totalResult[1] = exp1[1] + exp2[1];
   }
   else{
         totalResult[0] = exp1[0];
     totalResult[1] = exp1[1];
   }
   {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] SignedFactor() throws ParseException {
        String unary = "";
        String[] factor =null;
        Token t = null;
        String[] totalResult = new String[2];
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD_SUBT_OP:
      t = jj_consume_token(ADD_SUBT_OP);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    factor = Factor();
        if(t != null)checkIfStringArithExpr(factor[0]);

            if (t !=null){
                totalResult[0]= t.image + factor[0];
                totalResult[1]= t.image + factor[1];
            }
            else{
                totalResult[0]= factor[0];
                totalResult[1]= factor[1];
            }
            {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] PowFunction() throws ParseException {
String[] exp1 = null;
String[] exp2 = null;
String[] totalResult = new String[2];
    jj_consume_token(19);
    exp1 = Expression();
    jj_consume_token(20);
    exp2 = Expression();
    jj_consume_token(CLOSE_PAR);
        totalResult[0] ="java.lang.Math.pow("+exp1[0]+","+exp2[0]+")";
        totalResult[1] ="java.lang.Math.pow("+exp1[1]+","+exp2[1]+")";
        {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] AllCellsMeanValueFunction() throws ParseException {
        String[] exp1 = null;
        boolean instructOpenedLocal = instructionOpened;
        instructionOpened = true;
        String[] totalResult = new String[2];
    jj_consume_token(21);
    exp1 = Expression();
    jj_consume_token(CLOSE_PAR);
        checkIfStringArithExpr(exp1[0]);
        if(!(this.tissueDataFieldsInspector.checkForCellTypeConflict(this.recognizedVarNames)))
                {if (true) throw new ParseException("Usage of parameters owned by different cell types in one expression is not allowed!");}
                if(!instructOpenedLocal)instructionOpened = false;

                totalResult[0] = "ACMV("+exp1[0]+")";
            totalResult[1] =SteppableCodeFactory.getCalculationHandlerAndMethodCallForExpression(Names.BUILDACMVHANDLER+exp1[1], this.tissueDataFieldsInspector.getRequiredClasses());
        {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] GradientFunction() throws ParseException {
        String[] exp1 = null;
        boolean instructOpenedLocal = instructionOpened;
        instructionOpened = true;
        String[] totalResult = new String[2];
    jj_consume_token(22);
    exp1 = Expression();
    jj_consume_token(CLOSE_PAR);
        checkIfStringArithExpr(exp1[0]);
        if(!(this.tissueDataFieldsInspector.checkForCellTypeConflict(this.recognizedVarNames)))
                {if (true) throw new ParseException("Usage of parameters owned by different cell types in one expression is not allowed!");}
        if(!instructOpenedLocal)instructionOpened = false;
        totalResult[0]= "GRAD("+exp1[0]+")";
        totalResult[1] = Names.BUILDGRADIENTHANDLER + SteppableCodeFactory.
                                  getCalculationHandlerAndMethodCallForExpression(Names.BUILDGRADIENTHANDLER+exp1[1], this.tissueDataFieldsInspector.getRequiredClasses());
        {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] CellFunction() throws ParseException {
        String[] exp1 = null;
        boolean instructOpenedLocal = instructionOpened;
        instructionOpened = true;
        String[] totalResult = new String[2];
    jj_consume_token(23);
    exp1 = Expression();
    jj_consume_token(CLOSE_PAR);
        checkIfStringArithExpr(exp1[0]);
        if(!(this.tissueDataFieldsInspector.checkForCellTypeConflict(this.recognizedVarNames)))
                {if (true) throw new ParseException("Usage of parameters owned by different cell types in one expression is not allowed!");}
        if(!instructOpenedLocal)instructionOpened = false;
        totalResult[0]= "CELL("+exp1[0]+")";
        totalResult[1] = Names.BUILDCELLHANDLER + SteppableCodeFactory.
                                  getCalculationHandlerAndMethodCallForExpression(Names.BUILDCELLHANDLER+exp1[1], this.tissueDataFieldsInspector.getRequiredClasses());
        {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] SqrtFunction() throws ParseException {
        String[] exp = null;
        String[] totalResult = new String[2];
    jj_consume_token(24);
    exp = Expression();
    jj_consume_token(CLOSE_PAR);
        checkIfStringArithExpr(exp[0]);
        totalResult[0]= "Sqrt("+exp[0]+")";
        totalResult[1]="java.lang.Math.sqrt("+exp[1]+")";

        {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] AllCellsWhere() throws ParseException {
        String[] exp1 = null;
        String[] exp2 = null;
        String[] totalResult = new String[2];
    jj_consume_token(25);
    exp1 = Expression();
    jj_consume_token(20);
    exp2 = BooleanExpression();
    jj_consume_token(CLOSE_PAR);
        checkIfStringArithExpr(exp1[0]);
        totalResult[0]= "ACW("+exp1[0]+"," +exp2[0]+")";
        totalResult[1]="getAllCellsWhere("+exp1[1]+","+exp2[1]+")";
        {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] BooleanExpression() throws ParseException {
        String[] exp1 = null;
        String[] exp2 = null;
        String[] totalResult = new String[2];
    exp1 = BooleanTerm();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(26);
                                exp1[0] += "||"; exp1[1] += "||";
      exp2 = BooleanTerm();
    }
                if(exp2 != null){
                        totalResult[0] =exp1[0]+ exp2[0];
                        totalResult[1] =exp1[1]+ exp2[1];
                }
                else{
                        totalResult[0] =exp1[0];
                        totalResult[1] =exp1[1];
                }
                {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] BooleanTerm() throws ParseException {
        String[] exp1 = null;
        String[] exp2 = null;
        String[] totalResult = new String[2];
    exp1 = NotFactor();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(27);
                            exp1[0] += "&&"; exp1[1] += "&&";
      exp2 = NotFactor();
    }
                if(exp2 != null){
                        totalResult[0] =exp1[0]+ exp2[0];
                        totalResult[1] =exp1[1]+ exp2[1];
                }
                else{
                        totalResult[0] =exp1[0];
                        totalResult[1] =exp1[1];
                }
                {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] NotFactor() throws ParseException {
        String[] exp1 = null;
        Token t = null;
        String[] totalResult = new String[2];
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    exp1 = RelationalExpression();
                if(t != null){
                         totalResult[0]= t.image + exp1[0];
                         totalResult[1]= t.image + exp1[1];
                }
                else{
                         totalResult[0]= exp1[0];
                         totalResult[1]= exp1[1];
                }
                {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  final public String[] RelationalExpression() throws ParseException {
        String[] exp1 = null;
        String[] exp2 = null;
        Token t = null;
        String[] totalResult = new String[2];
    exp1 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REL_OP:
      t = jj_consume_token(REL_OP);
      exp2 = Expression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
        if (t !=null && exp2 != null){
        totalResult[0] = exp1[0] + t.image + exp2[0];
    totalResult[1] = exp1[1] + t.image + exp2[1];
   }
   else if(exp2 != null){
         totalResult[0] = exp1[0] + exp2[0];
     totalResult[1] = exp1[1] + exp2[1];
   }
   else{
         totalResult[0] = exp1[0];
     totalResult[1] = exp1[1];
   }
   {if (true) return totalResult;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DataMonitoringExpressionCheckerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1ea30a0,0x1ea30a0,0x20000,0x1280080,0x20,0x40,0x20,0x4000000,0x8000000,0x1000,0x200,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DataMonitoringExpressionChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DataMonitoringExpressionChecker(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DataMonitoringExpressionCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DataMonitoringExpressionChecker(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DataMonitoringExpressionCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DataMonitoringExpressionChecker(DataMonitoringExpressionCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DataMonitoringExpressionCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
